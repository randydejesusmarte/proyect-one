using HttpNamespaceManager.UI;
using System.Runtime.Versioning;
using Thot_Librery.Codigo_Factura;

namespace WindowsFormsApp1
{
    public partial class Facturar : Form
    {
        public Facturar()
        {
            InitializeComponent();
            InitializeForm();
        }

        private readonly int idcliente;
        internal int _id;

        private void InitializeForm()
        {
            try
            {
                RefreshNomcliText(); // Refresca el campo de texto con datos del cliente
                autoid(); // Genera automáticamente el ID de la factura
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al inicializar el formulario: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        [SupportedOSPlatform("windows6.1")]
        private void RefreshNomcliText()
        {
            try
            {
                new TextrefreshAttribute().RefreshText(nomcli);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al refrescar el texto del cliente: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Add_Click(object sender, EventArgs e)
        {
            try
            {
                // Validación de entradas
                if (string.IsNullOrEmpty(idfactura.Text) || string.IsNullOrEmpty(producto.Text) || string.IsNullOrEmpty(precio.Text) || string.IsNullOrEmpty(cantidad.Text))
                {
                    MessageBox.Show("Por favor, complete todos los campos antes de agregar.", "Advertencia", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Conversión segura de datos
                if (!int.TryParse(idfactura.Text, out int idFactura) || !decimal.TryParse(precio.Text, out decimal precioDecimal) || !int.TryParse(cantidad.Text, out int cantidadInt))
                {
                    MessageBox.Show("Por favor, ingrese valores válidos en los campos de ID, precio y cantidad.", "Advertencia", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Agregar factura
                new Agregar_Factura().Agregar(idFactura, idcliente, producto.Text, precioDecimal.ToString(), cantidadInt.ToString(), monto.Text, monto.Text, _id, DateTime.Now.ToString());

                // Actualizar DataGridView
                dataGridView1.DataSource = new FillData().Datos(idfactura.Text);
                dataGridView1.AutoResizeColumns();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar la factura: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void autoid()
        {
            try
            {
                idfactura.Text = new Auto_increment().Cont().ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al generar el ID de la factura: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                if (InputBox.Show("Buscar Entrada", "Número de Entrada", out string texto) == DialogResult.OK)
                {
                    idfactura.Text = texto;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al buscar la entrada: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
